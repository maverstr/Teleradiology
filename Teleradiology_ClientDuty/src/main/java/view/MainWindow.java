/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import client.DICOMSCU;
import client.Report;
import com.pixelmed.dicom.Attribute;
import com.pixelmed.dicom.AttributeList;
import com.pixelmed.dicom.AttributeTag;
import com.pixelmed.dicom.CodeStringAttribute;
import com.pixelmed.dicom.DicomDirectory;
import com.pixelmed.dicom.DicomDirectoryRecord;
import com.pixelmed.dicom.DicomException;
import com.pixelmed.dicom.DicomInputStream;
import com.pixelmed.dicom.SOPClass;
import com.pixelmed.dicom.TagFromName;
import com.pixelmed.display.SourceImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import model.Patient;
import model.Person;

/**
 *
 * @author LVdP & RR
 * 
 * TO DO :
 *  - Virer l'onglet FHIR ?
 */
public class MainWindow extends javax.swing.JFrame {
    
    DICOMSCU scu = new DICOMSCU();
    File dicomdirPath;
    TreeModel dicomdir = new DefaultTreeModel(null);
    ArrayList<Patient> patientsSearchResult = new ArrayList();
    AttributeList al = null;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        fhirPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        receivedUIDList = new javax.swing.JList<>();
        refreshButton = new javax.swing.JButton();
        reportButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        dicomdirTree = new javax.swing.JTree();
        dicomImageLabel = new javax.swing.JLabel();
        SelectDicomdir = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(receivedUIDList);

        refreshButton.setText("REFRESH");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        reportButton.setText("Write report");
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });

        dicomdirTree.setModel(null);
        dicomdirTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                dicomdirTreeValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(dicomdirTree);

        SelectDicomdir.setText("Select DICOMDIR");
        SelectDicomdir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectDicomdirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(refreshButton, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(SelectDicomdir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(reportButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dicomImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refreshButton)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(reportButton)
                        .addComponent(SelectDicomdir, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dicomImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE))
                .addContainerGap())
        );

        fhirPane.addTab("PACS", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fhirPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fhirPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    
    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        if (al == null){
            JOptionPane.showMessageDialog(null,"You don't choose any DICOM file " );
        }
        /*ABANDON de mettre des commentaires sur les series
        else if(al.get(TagFromName.SeriesInstanceUID) != null){
            //TO DO : récup le fichier à l'adresse donné par dicomdir pour aller chercher l'attribute list complète
            //Object selectedObject = dicomdirTree.getLastSelectedPathComponent();
            //System.out.println(selectedObject.toString());
            //DicomDirectoryRecord ddr = (DicomDirectoryRecord) selectedObject;
            //String nbserie = (al.get(TagFromName.SeriesNumber).getSingleStringValueOrEmptyString());
            //File serieFile = new File((File) ddr.getParent(), nbserie); //l'UPCAST NE PASSE PAS, trouver une autre solution abso
            //System.out.println(serieFile.getPath());
            //System.out.println(filePath);
            //System.out.println(imageFile.getAbsolutePath());
            /*DicomInputStream dis=null;
            try {
                dis = new DicomInputStream(file);
                AttributeList alist = new AttributeList();
                alist.read(dis);
                al.put(TagFromName.StudyInstanceUID, alist.get(TagFromName.StudyInstanceUID)); //Pas très bonne pratique, au mieux, on devrait prendre tout l'AL
                //al.put(TagFromName.SeriesInstanceUID,alist.get(TagFromName.SeriesInstanceUID));//mais ça ne marchait pas du coup on prend juste ce qui est nécessaire
                al.put(TagFromName.PatientName,alist.get(TagFromName.PatientName));
                WriteReport reportWindow = new WriteReport(al);
                reportWindow.setVisible(true);
            } catch (IOException | DicomException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }//
        }*/
        else if(al.get(TagFromName.ReferencedSOPInstanceUIDInFile) != null){
            String filePath = al.get(TagFromName.ReferencedFileID).getDelimitedStringValuesOrEmptyString();
            File imageFile = new File(dicomdirPath.getParent(), filePath);
            System.out.println(filePath);
            System.out.println(imageFile.getAbsolutePath());
            DicomInputStream dis=null;
            try {
                dis = new DicomInputStream(imageFile);
                AttributeList alist = new AttributeList();
                AttributeList alist2 = new AttributeList();//pour créer une AL from scratch
                alist.read(dis);
                alist2.put(TagFromName.StudyInstanceUID, alist.get(TagFromName.StudyInstanceUID)); //Pas très bonne pratique, au mieux, on devrait prendre tout l'AL
                alist2.put(TagFromName.SeriesInstanceUID,alist.get(TagFromName.SeriesInstanceUID));//mais ça ne marchait pas du coup on prend juste ce qui est nécessaire
                alist2.put(TagFromName.PatientName,alist.get(TagFromName.PatientName)); //TO DO : rajouter le patient ID
                alist2.put(TagFromName.SOPInstanceUID, alist.get(TagFromName.SOPInstanceUID));
                //{ AttributeTag t = TagFromName.TransferSyntaxUID; Attribute a = new CodeStringAttribute(t); a.addValue("1.2.840.10008.1.2.1"); alist2.put(t,a); }
                { AttributeTag t = TagFromName.SOPClassUID; Attribute a = new CodeStringAttribute(t); a.addValue(SOPClass.BasicTextSRStorage); alist2.put(t,a); }
                WriteReport reportWindow = new WriteReport(alist, filePath); //on va créer un rapport avec toute l'AL qui provient du fichier dcm original
                reportWindow.setVisible(true);
            } catch (IOException | DicomException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            JOptionPane.showMessageDialog(null,"You need to select an image to comment" );
            //Implement a way to verify that no report was previously written
        }

    }//GEN-LAST:event_reportButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO : récupérer les dossiers non traités sur le serveur
        scu.doGet("1.3.46.670589.11.17052.5.0.5396.2008041011440970008"); //permet de récupérer tout ce qui est sur le serveur
        //ATTENTION vérifier qu'on sait récup les infos
        /*ArrayList<String> receivedStudyInstanceUIDs = doFindScu(azaz.getText)

        //AFFFICHAGE DES PATIENTS RECUPERES DANS LA DATABASE

        /*if( receivedStudyInstanceUIDs != null ){
            DefaultListModel<String> receivedListModel = new DefaultListModel();
            for( String uid : receivedStudyInstanceUIDs ){
                receivedListModel.addElement(uid);
            }
            receivedUIDList.setModel(receivedListModel);
        }*/
    }//GEN-LAST:event_refreshButtonActionPerformed
/**/
    private void SelectDicomdirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectDicomdirActionPerformed
        JFileChooser jfc = new JFileChooser("D:\\Users\\INFO-H-400\\libraries\\dcm4che-5.14.0\\bin");
        
        if( jfc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION ){
            DicomInputStream dis = null;
            try {
                dicomdirPath = jfc.getSelectedFile();
                System.out.println(dicomdirPath.getAbsolutePath());
                dis = new DicomInputStream(dicomdirPath);
                AttributeList alist = new AttributeList();
                alist.read(dis);
                dicomdir = new DicomDirectory(alist);
                dicomdirTree.setModel(dicomdir);
            } catch (IOException | DicomException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    dis.close();
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
    }//GEN-LAST:event_SelectDicomdirActionPerformed

    private void dicomdirTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_dicomdirTreeValueChanged
        Object selectedObject = dicomdirTree.getLastSelectedPathComponent();
        DicomDirectoryRecord ddr = (DicomDirectoryRecord) selectedObject;
        al = ddr.getAttributeList();
        
        if( al.get(TagFromName.DirectoryRecordType).getSingleStringValueOrEmptyString().equals("IMAGE") ){
            try {
                String imagePath = al.get(TagFromName.ReferencedFileID).getDelimitedStringValuesOrEmptyString();
                File imageFile = new File(dicomdirPath.getParent(), imagePath);
                System.out.println(imagePath);
                System.out.println(imageFile.getAbsolutePath());
                SourceImage sImg = new SourceImage(imageFile.getAbsolutePath()); // path = path to the DICOM file containing the image data. Note that the DICOMDIR doesn't have the image data!
                dicomImageLabel.setIcon(new ImageIcon(sImg.getBufferedImage())); // Shows image in a jLabel
            } catch (IOException | DicomException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_dicomdirTreeValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SelectDicomdir;
    private javax.swing.JLabel dicomImageLabel;
    private javax.swing.JTree dicomdirTree;
    private javax.swing.JTabbedPane fhirPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JList<String> receivedUIDList;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton reportButton;
    // End of variables declaration//GEN-END:variables
    private view.CreatePersonForm personForm;
}
